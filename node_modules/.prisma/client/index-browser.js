
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.5.0
 * Query Engine version: 78a5df6def6943431f4c022e1428dbc3e833cf8e
 */
Prisma.prismaVersion = {
  client: "3.5.0",
  engine: "78a5df6def6943431f4c022e1428dbc3e833cf8e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Gd_userScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  user_email: 'user_email',
  user_password: 'user_password',
  user_first_name: 'user_first_name',
  user_last_name: 'user_last_name',
  user_status: 'user_status',
  user_create_at: 'user_create_at',
  user_update_at: 'user_update_at',
  user_create_by: 'user_create_by',
  user_update_by: 'user_update_by',
  user_deleted: 'user_deleted',
  user_deleted_at: 'user_deleted_at'
});

exports.Prisma.Gd_tokenScalarFieldEnum = makeEnum({
  access_token: 'access_token',
  user_id: 'user_id',
  referesh_token: 'referesh_token',
  token_create_at: 'token_create_at',
  token_expired_at: 'token_expired_at'
});

exports.Prisma.Gd_roleScalarFieldEnum = makeEnum({
  role_id: 'role_id',
  role_name: 'role_name',
  role_create_date: 'role_create_date',
  role_update_date: 'role_update_date',
  role_create_by: 'role_create_by',
  role_update_by: 'role_update_by'
});

exports.Prisma.Gd_user_roleScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  role_id: 'role_id',
  user_role_create_date: 'user_role_create_date',
  user_role_update_date: 'user_role_update_date',
  user_role_create_by: 'user_role_create_by',
  user_role_update_by: 'user_role_update_by'
});

exports.Prisma.Gd_projectScalarFieldEnum = makeEnum({
  project_id: 'project_id',
  project_name: 'project_name',
  project_revision: 'project_revision',
  project_create_date: 'project_create_date',
  project_update_date: 'project_update_date',
  project_create_by: 'project_create_by',
  project_update_by: 'project_update_by',
  project_deleted: 'project_deleted',
  project_deleted_at: 'project_deleted_at'
});

exports.Prisma.Gd_user_projectScalarFieldEnum = makeEnum({
  project_id: 'project_id',
  user_id: 'user_id',
  user_project_create_date: 'user_project_create_date',
  user_project_update_date: 'user_project_update_date',
  user_project_create_by: 'user_project_create_by',
  user_project_update_by: 'user_project_update_by'
});

exports.Prisma.Gd_workflowScalarFieldEnum = makeEnum({
  workflow_id: 'workflow_id',
  workflow_name: 'workflow_name',
  project_id: 'project_id',
  workflow_create_date: 'workflow_create_date',
  workflow_update_date: 'workflow_update_date',
  workflow_create_by: 'workflow_create_by',
  workflow_update_by: 'workflow_update_by',
  workflow_delete: 'workflow_delete',
  workflow_delete_at: 'workflow_delete_at'
});

exports.Prisma.Gd_fileScalarFieldEnum = makeEnum({
  file_id: 'file_id',
  file_path: 'file_path',
  project_id: 'project_id',
  workflow_id: 'workflow_id',
  file_create_date: 'file_create_date',
  file_update_date: 'file_update_date',
  file_create_by: 'file_create_by',
  file_update_by: 'file_update_by',
  file_deleted: 'file_deleted',
  file_deleted_at: 'file_deleted_at'
});

exports.Prisma.Gd_logScalarFieldEnum = makeEnum({
  log_id: 'log_id',
  workflow_id: 'workflow_id',
  log_session_time: 'log_session_time',
  log_session_attempt: 'log_session_attempt',
  log_last_duration: 'log_last_duration',
  log_status: 'log_status',
  log_created_date: 'log_created_date',
  log_updated_date: 'log_updated_date',
  log_created_by: 'log_created_by',
  log_updated_by: 'log_updated_by'
});

exports.Prisma.Gd_import_fileScalarFieldEnum = makeEnum({
  import_id: 'import_id',
  import_file_name: 'import_file_name',
  import_fundname: 'import_fundname',
  import_uploaded: 'import_uploaded',
  import_status_raw_table: 'import_status_raw_table',
  import_status_destination_table: 'import_status_destination_table',
  import_date_uploaded: 'import_date_uploaded',
  user_id: 'user_id'
});

exports.Prisma.Gd_datalake_fileScalarFieldEnum = makeEnum({
  dl_file_id: 'dl_file_id',
  dl_file_name: 'dl_file_name',
  dl_folder_id: 'dl_folder_id',
  dl_file_content: 'dl_file_content',
  dl_file_deleted: 'dl_file_deleted',
  dl_file_created_by: 'dl_file_created_by',
  dl_file_updated_by: 'dl_file_updated_by',
  dl_file_deleted_at: 'dl_file_deleted_at',
  dl_file_updated_at: 'dl_file_updated_at',
  dl_file_created_at: 'dl_file_created_at'
});

exports.Prisma.Gd_datalake_folderScalarFieldEnum = makeEnum({
  dl_folder_id: 'dl_folder_id',
  dl_folder_name: 'dl_folder_name',
  dl_parent_folder_id: 'dl_parent_folder_id',
  dl_folder_deleted: 'dl_folder_deleted',
  dl_folder_created_by: 'dl_folder_created_by',
  dl_folder_updated_by: 'dl_folder_updated_by',
  dl_folder_deleted_at: 'dl_folder_deleted_at',
  dl_folder_updated_at: 'dl_folder_updated_at',
  dl_folder_created_at: 'dl_folder_created_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  gd_user: 'gd_user',
  gd_token: 'gd_token',
  gd_role: 'gd_role',
  gd_user_role: 'gd_user_role',
  gd_project: 'gd_project',
  gd_user_project: 'gd_user_project',
  gd_workflow: 'gd_workflow',
  gd_file: 'gd_file',
  gd_log: 'gd_log',
  gd_import_file: 'gd_import_file',
  gd_datalake_file: 'gd_datalake_file',
  gd_datalake_folder: 'gd_datalake_folder'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
